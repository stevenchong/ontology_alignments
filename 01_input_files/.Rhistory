### This script creates CSV files showing the labels and IDs that are present in ontology files. CSV files are also created that
### displays the unique labels present in each vocabulary. These CSV files can be used as the basis of comparisons between
### the different vocabularies. The input files are RDF files for Envthes and the LTER Controlled Vocabulary and and Excel file
### for ENVO terms that may be downloaded from Ontobee. These files should be placed into a folder titled "01_input_ontology_files"
### or the appropriate line should be changed in the code below.
### Libraries
library(dplyr)
library(xml2)
library(readxl)
### Functions
# Reads in the XML from a SKOS ontology file and creates a dataframe containingcolumns for concept IDs, preferred labels and alternative labels
get_concept_labels <- function (concepts) {
for (counter in 1:length(concepts)){
# Get the text for each concept ID, prefLabel and altLabel
ID <- xml_attrs(concepts[counter])
prefLabel <- as.character(xml_find_all(concepts[counter], "skos:prefLabel[@xml:lang='en']/text()") )
altLabel <- as.character(xml_find_all(concepts[counter], "./skos:altLabel[@xml:lang='en']/text()") )
# Use the longest length to set the dataframe for each concept
if (length(prefLabel) > length(altLabel) ){
df_length <- length(prefLabel)
} else {
df_length <- length(altLabel)
}
# If there are no altLabels or prefLabels
if (length(altLabel) == 0 && length(prefLabel) == 0){
df_length <- length(ID)
}
# Make the dataframe
df_individual_concept <- as.data.frame(matrix(nrow = df_length, dimnames = list(c(),c("ID"))), stringsAsFactors = FALSE)
# Set blanks if no text for any of the labels
if(length(altLabel) == 0){
altLabel <- ""
}
if(length(prefLabel) == 0){
prefLabel <- ""
}
# Insert the text into the dataframe
df_individual_concept$ID <- as.character(ID)
df_individual_concept$skos_prefLabel <- prefLabel %>%
trimws() %>%
{ gsub('[\r\n]', "", .) } %>%
{ gsub('  ', "", .) }
df_individual_concept$skos_altLabel <- altLabel %>%
trimws() %>%
{ gsub('[\r\n]', "", .) } %>%
{ gsub('  ', "", .) }
# Insert each dataframe into the list
list_concepts[[counter]] <- df_individual_concept
}
# Combine the dataframes, remove duplicate rows
df_all_concepts <- do.call(bind_rows, list_concepts) %>%
distinct()
}
# Reads in dataframe containing preferred and alternative labels and combines them into a single column
get_labels <- function(df_all_concepts) {
altLabels <- data.frame(df_all_concepts$skos_altLabel, df_all_concepts$ID) %>%
select(label = df_all_concepts.skos_altLabel, ID = df_all_concepts.ID)
prefLabels <- data.frame(df_all_concepts$skos_prefLabel, df_all_concepts$ID) %>%
select(label = df_all_concepts.skos_prefLabel, ID = df_all_concepts.ID)
labels <- rbind(prefLabels, altLabels) %>%
{ data.frame(lapply( . , trimws), stringsAsFactors = FALSE) } %>% #trim any whitespace
{ data.frame(lapply( . , tolower), stringsAsFactors = FALSE) } %>%
filter (label != '') %>%
distinct() %>%
arrange(label) # sort alphabetically
}
### Read input subdirectory and create output subdirectory
input_subDir <- "./01_input_ontology_files"
output_subDir <- "./02_output_labels_files"
dir.create(file.path(getwd(), output_subDir), showWarnings = FALSE)
##### Get labels from Envthes
# Initialize list
list_concepts <- list()
#Read in RDF file
ontology_file <- list.files(path = input_subDir, full.names = TRUE, pattern = "envthes.rdf") %>%
read_xml()
# Find all concept nodes
concepts <- xml_find_all(ontology_file, "rdf:Description")
# Create dataframe storing all concepts and their labels
df_all_concepts <- get_concept_labels(concepts)
# Write CSV (labels organized by concept)
write.csv(df_all_concepts, file = paste0(output_subDir,"/EnvThes_all_concepts.csv"), row.names = FALSE)
# Put all Envthes labels into a single column
df_Envthes_labels <- get_labels(df_all_concepts)
# Write CSV (all labels in a single column)
write.csv(df_Envthes_labels, file = paste0(output_subDir,"/EnvThes_all_labels.csv"), row.names = FALSE)
##### Get labels and IDs from ENVO (.xlsx file downloaded from Ontobee)
# Read in xlsx file
df_ENVO <- read_xlsx(path = paste0(input_subDir,'/', 'ENVO.xlsx')) %>%
select (term_label = 'Term label' , altLabel = 'Alternative term', ID = 'Term IRI')
# Put all of the labels into a single column
altLabels <- data.frame(df_ENVO$altLabel, df_ENVO$ID) %>%
select(label = df_ENVO.altLabel, ID = df_ENVO.ID) %>%
{ filter( . , is.na(label) == FALSE ) } # keep rows that don't contain NA
prefLabels <- data.frame(df_ENVO$term_label, df_ENVO$ID) %>%
select(label = df_ENVO.term_label, ID = df_ENVO.ID) %>%
{ filter( . , is.na(label) == FALSE ) } # keep rows that don't contain NA
df_ENVO_labels <- rbind(prefLabels, altLabels) %>%
{ data.frame(lapply( . , trimws), stringsAsFactors = FALSE) } %>% #trim any whitespace
{ data.frame(lapply( . , tolower), stringsAsFactors = FALSE) } %>%
filter (label != '') %>%
distinct() %>%
arrange(label) # sort alphabetically
# Write CSV (all labels in a single column)
write.csv(df_ENVO_labels, file = paste0(output_subDir,"/ENVO_all_labels.csv"), row.names = FALSE)
setwd("~/Desktop/ontology_alignments/ECSO_ENVO_Envthes/01_input_ontology_files")
### This script tabularizes the label and definition fields in an OWL file that is in RDF/XML format.  It will create a CSV file
### with columns containing the class URIs, labels, preferred labels, alternative labels, hidden labels, and definitions.
#Libraries
library(dplyr)
library(xml2)
#Initialize list for ECSO terms
list_IDs <- list()
df_length <- 1
#Read in ontology file
ontology_file <- list.files(full.names = TRUE, pattern = "ECSO8.owl") %>%
read_xml()
# Get the all of the ontology terms
ECSO_IDs <- xml_find_all(ontology_file, "//owl:Class[@rdf:about]") #%>%
# Iterate through each term
for (counter in 1:length(ECSO_IDs)){
# Extract the ID, labels, and definition for each term
ID <- xml_attrs(ECSO_IDs[counter])
ECSO_label <- as.character(xml_find_all(ECSO_IDs[counter], "rdfs:label/text()"))
prefLabel <- as.character(xml_find_all(ECSO_IDs[counter], "skos-owl1-dl:prefLabel/text()") )
altLabel <- as.character(xml_find_all(ECSO_IDs[counter], "skos-owl1-dl:altLabel/text()") )
hiddenLabel <- as.character(xml_find_all(ECSO_IDs[counter], "skos-owl1-dl:hiddenLabel/text()") )
definition <- as.character(xml_find_all(ECSO_IDs[counter], "skos-owl1-dl:definition/text()") )
IAO_0000119 <- as.character(xml_find_all(ECSO_IDs[counter], "obo:IAO_0000119/text()") )
dc_creator <- as.character(xml_find_all(ECSO_IDs[counter], "dc:creator/text()") )
dc_creator2 <- as.character(xml_find_all(ECSO_IDs[counter], "dc:creator/@rdf:resource") )
dc_contributor <- as.character(xml_find_all(ECSO_IDs[counter], "dc:contributor/text()") )
# Set the lengths of the individual dataframes
if (length(prefLabel) > length(altLabel) ){
df_length <- length(prefLabel)
} else {
df_length <- length(altLabel)
}
if(length(hiddenLabel) > df_length){
df_length <- length(hiddenLabel)
}
if(length(ECSO_label) > df_length){
df_length <- length(ECSO_label)
}
if(length(definition) > df_length){
df_length <- length(definition)
}
if(length(IAO_0000119) > df_length){
df_length <- length(IAO_0000119)
}
if(length(dc_creator) > df_length){
df_creator <- length(dc_creator)
}
if(length(dc_creator2) > df_length){
df_creator2 <- length(dc_creator2)
}
if(length(dc_contributor) > df_length){
df_contributor <- length(dc_contributor)
}
if (length(altLabel) == 0 && length(prefLabel) == 0 && length(ECSO_label) == 0 && length(hiddenLabel) == 0 && length(definition) == 0
&& length(IAO_0000119) == 0 && length(dc_creator) == 0 && length(dc_creator2) == 0 && length(dc_contributor) == 0){
df_length <- length(ID)
}
df_individual_ECSO_term <- as.data.frame(matrix(nrow = df_length, dimnames = list(c(),c("ID"))), stringsAsFactors = FALSE)
# Set the label to blank if no text
if (length(ECSO_label) == 0 ){
ECSO_label <- ""
}
if(length(altLabel) == 0){
altLabel <- ""
}
if(length(prefLabel) == 0){
prefLabel <- ""
}
if(length(hiddenLabel) == 0){
hiddenLabel <- ""
}
if(length(definition) == 0){
definition <- ""
}
if(length(IAO_0000119) == 0){
IAO_0000119 <- ""
}
if(length(dc_creator) == 0){
dc_creator <- ""
}
if(length(dc_creator2) == 0){
dc_creator2 <- ""
}
if(length(dc_contributor) == 0){
dc_contributor <- ""
}
# Assemble the dataframes for individual terms
df_individual_ECSO_term$ID <- as.character(ID)
df_individual_ECSO_term$label <- ECSO_label %>%
trimws()
df_individual_ECSO_term$prefLabel <- prefLabel %>%
trimws()
df_individual_ECSO_term$altLabel <- altLabel %>%
trimws()
df_individual_ECSO_term$hiddenLabel <- hiddenLabel %>%
trimws()
df_individual_ECSO_term$definition <- definition %>%
trimws()
df_individual_ECSO_term$IAO_0000119 <- IAO_0000119 %>%
trimws()
df_individual_ECSO_term$dc_creator <- dc_creator %>%
trimws()
df_individual_ECSO_term$dc_creator2 <- dc_creator2 %>%
trimws()
df_individual_ECSO_term$dc_contributor <- dc_contributor %>%
trimws()
list_IDs[[counter]] <- df_individual_ECSO_term
}
# Combine the individual dataframes
df_all_ECSO_terms <- do.call(bind_rows, list_IDs) %>%
distinct()
write.csv(df_all_ECSO_terms, file = "ECSO_labels_and_definitions.csv", row.names = FALSE)
